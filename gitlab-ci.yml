stages:
  - test
  - build
#  - tag

Test Stage:
  stage: test
  environment:
    name: $CI_COMMIT_REF_SLUG  
  image: 
    name: "public.ecr.aws/docker/library/node:latest"
  script:
    - |
      npm install
      npm run test:coverage 
  allow_failure: true     
#  #      eval $(aws sts assume-role --role-arn $PY_ROLE --role-session-name gitlab_ci_cd | jq -r '.Credentials | "export #AWS_ACCESS_KEY_ID=\(.AccessKeyId)\nexport AWS_SECRET_ACCESS_KEY=\(.SecretAccessKey)\nexport AWS_SESSION_TOKEN=\(.SessionToken)#\n"')

  #      export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token \
  #        --domain $REPOSITORY_DOMAIN --domain-owner $PY_ACCOUNT_ID \
  #       --query authorizationToken --output text)

build_docker_image:
  stage: build
  environment:
    name: $CI_COMMIT_REF_SLUG
  services:
   - name: docker:dind
     alias: thedockerhost
  variables:
    DOCKER_HOST: tcp://thedockerhost:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

#  image: docker:20.10.10
#  services:
#        - docker:20.10.10-dind
#  image: public.ecr.aws/b4p2j5t6/dind:latest
  script:
    - |
      apk update
      apk add python3 py3-pip
      pip3 install awscli --upgrade
      python3 -m pip install pip --upgrade
      python3 -m pip install awscli

    - docker build --tag $ACCOUNT_ID.dkr.ecr.$DEPLOYED_REGION.amazonaws.com/node-js:$StageName_Lower .
    #--tag $ACCOUNT_ID.dkr.ecr.$DEPLOYED_REGION.amazonaws.com/node-js:$StageName_Lower
#    - *docker_assume_py_role
    - |
#      LOGIN=`aws ecr --no-include-email get-login`
#      eval $LOGIN
    - docker push $ACCOUNT_ID.dkr.ecr.$DEPLOYED_REGION.amazonaws.com/node-js:$StageName_Lower
#  only:
#    variables:
#      - $DEPLOY_STACK =~ /True/
