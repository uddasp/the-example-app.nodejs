stages:
  - test
  - build
  - tag

.docker_assume_py_role: &docker_assume_py_role
  - |
      #assume role to access code artifact
      echo "assume role to access code artifact"
      KST=$(aws sts assume-role --role-arn "$PY_ROLE" --role-session-name "deployment-$CI_COMMIT_REF_NAME" --query '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken]' --output text)
      unset AWS_SECURITY_TOKEN
      unset AWS_ACCESS_KEY_ID
      unset AWS_SESSION_TOKEN
      unset AWS_SECRET_ACCESS_KEY
      export AWS_DEFAULT_REGION=$DEPLOYED_REGION
      export AWS_ACCESS_KEY_ID="$(echo $KST | cut -d' ' -f1)"
      export AWS_SECRET_ACCESS_KEY="$(echo $KST | cut -d' ' -f2)"
      export AWS_SESSION_TOKEN="$(echo $KST | cut -d' ' -f3)"
      export AWS_SECURITY_TOKEN="$(echo $KST | cut -d' ' -f3)"
Test Stage:
  stage: test
  image: public.ecr.aws/docker/library/node:latest
  environment:
    name: $CI_COMMIT_REF_SLUG
  script:
      - |
  #      eval $(aws sts assume-role --role-arn $PY_ROLE --role-session-name gitlab_ci_cd | jq -r '.Credentials | "export AWS_ACCESS_KEY_ID=\(.AccessKeyId)\nexport AWS_SECRET_ACCESS_KEY=\(.SecretAccessKey)\nexport AWS_SESSION_TOKEN=\(.SessionToken)\n"')

  #      export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token \
  #        --domain $REPOSITORY_DOMAIN --domain-owner $PY_ACCOUNT_ID \
  #       --query authorizationToken --output text)
      - npm install
      - npm run test:coverage

build_metaflow_docker:
  stage: build
  environment:
    name: $CI_COMMIT_REF_SLUG
  image: public.ecr.aws/c4n5h7z5/dind:latest
  script:
    - |
      apk update
      apk add python3 py3-pip
      pip3 install awscli --upgrade
      python3 -m pip install pip --upgrade
      python3 -m pip install awscli

    - *docker_assume_py_role
#    - |
#      export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token \
#        --domain $REPOSITORY_DOMAIN --domain-owner $PY_ACCOUNT_ID \
#        --query authorizationToken --output text)
#          
#      sed -i "s/CODEARTIFACT_TOKEN/$CODEARTIFACT_AUTH_TOKEN/g" src/components/requirements.txt
#      sed -i "s/REPOSITORY_NAME-ACCOUNT_ID/$REPOSITORY_NAME-$PY_ACCOUNT_ID/g" src/components/requirements.txt
#      sed -i "s/REGION/$DEPLOYED_REGION/g" src/components/requirements.txt
#    - cd src
    - docker build --tag $ACCOUNT_ID.dkr.ecr.$DEPLOYED_REGION.amazonaws.com/node-js:$StageName_Lower .
    - *docker_assume_deploy_role
    - |
      LOGIN=`aws ecr --no-include-email get-login`
      eval $LOGIN
    - docker push $ACCOUNT_ID.dkr.ecr.$DEPLOYED_REGION.amazonaws.com/node-js:$StageName_Lower
#  only:
#    variables:
#      - $DEPLOY_STACK =~ /True/

#tag_release:
#  stage: tag
#  environment:
#    name: $CI_COMMIT_REF_SLUG
#  script:
#    - git config --global user.email $GITLAB_USER_EMAIL
#    - git config --global user.name $GITLAB_USER_NAME
#    - echo $CI_REPOSITORY_URL
#    - URL=`echo $CI_REPOSITORY_URL | sed -e "s/gitlab-ci-token/datax_system_user/g"`
#    - URL=`echo $URL | sed -e "s/$CI_JOB_TOKEN/$TAG_TOKEN/g"`
#    - git remote set-url origin $URL
#    - dt=`date +%Y%m%d%H%M%S`
#    - git tag -a "dummy-staging-$dt" -m "auto tagged for staging"
#    - git push origin "dummy-staging-$dt"
#  only:
#    - master